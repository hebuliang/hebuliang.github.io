<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[深藏功与名]]></title>
  <link href="http://hebuliang.github.io/atom.xml" rel="self"/>
  <link href="http://hebuliang.github.io/"/>
  <updated>2013-08-13T23:17:28+08:00</updated>
  <id>http://hebuliang.github.io/</id>
  <author>
    <name><![CDATA[He Liang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[理解事件队列]]></title>
    <link href="http://hebuliang.github.io/blog/2013/08/13/events-and-timing-in-depth/"/>
    <updated>2013-08-13T19:28:00+08:00</updated>
    <id>http://hebuliang.github.io/blog/2013/08/13/events-and-timing-in-depth</id>
    <content type="html"><![CDATA[<p>这篇文章的原型是来自于<a href="http://javascript.info/">JavaScript Tutorial</a>（作者:Ilya Kantor）的其中一小节<a href="http://javascript.info/tutorial/events-and-timing-depth">Events and timing in-depth</a>，不能算是翻译，因为我不会把一整节内容都搬过来，只写关键的事件队列部分。</p>

<p>浏览器中的JavaScript引擎是一种基于事件驱动的单线程模型，无论在什么时候都只且只有一个JavaScript线程在运行程序，<strong>事件</strong>可以看作是浏览器分发给JavaScript引擎的许多任务，这些任务可以是JavaScript引擎当前执行的代码块，也可以来自浏览器内核的其它线程，比如鼠标点击事件，定时器时间到达通知，异步请求状态变更通知等，JavaScript引擎一直等待着任务队列中任务的到来，由于JavaScript单线程的关系，这些任务必须得排队等着被引擎挨个收拾。</p>

<!--more-->


<p>浏览器本身是允许多个线程异步执行的，除了JavaScript引擎线程以外还有GUI渲染线程（负责界面渲染）、浏览器事件触发线程、定时触发线程、HTTP请求线程、AJAX请求线程、下载线程等等，其中前三个线程属于常驻线程，说到这里不得不提一下GUI渲染线程，虽说浏览器支持线程异步执行，但是JavaScript线程和GUI渲染线程是互斥的，也就是说在JavaScript脚本操作DOM时，GUI渲染线程处于挂起状态不会有任何动作，比如添加元素、删除元素或者改变元素外观等等，界面的更新并不会立即体现出来，所有的操作都会保存在一个队列中，直到脚本运行结束后，GUI渲染线程发现脚本执行触发了界面的Reflow或者Repaint动作（关于这两个动作的区别和触发时机不在本文详细说明，有兴趣的可以自行google），此时才会接手对界面进行渲染（这也是为什么网页优化建议中js文件要放在html内容的最后，就是因为加载js的时候，会阻塞DOM树的构建），下面我们看个小栗子：</p>

<pre><code>(function() {
    var htmlStr = '';
    var el = document.getElementById('main');

    for (var i = 0; i &lt;= 100; i++) {
        var str = '&lt;div id="test' + i + '"&gt;test' + i + '&lt;/div&gt;';
        htmlStr += str;
    }

    var el = document.getElementById('main');
    el.innerHTML = htmlStr;

    // Timeout 2 seconds!
    sleep(2000);

    var last = document.getElementById('test100');
    last.addEventListener('click', function(e) {
        alert(this.id);
    }, false);

    function sleep(numberMillis) {
        var now = new Date();
        var exitTime = now.getTime() + numberMillis;
        while (true) {
            now = new Date();
            if (now.getTime() &gt; exitTime)
                return;
        }
    }
})();
</code></pre>

<p>代码中使用了一个小手段模拟挂起函数，此时浏览器的行为并不是先显示出插入的所有节点然后再执行事件绑定，而是会有两秒钟的等待时间，然后GUI渲染线程才会讲被插入的元素进行更新和显示。</p>

<p>接下来是见证奇迹的时刻，如果我们把代码改成下面这个样子你猜会发生什么事情？</p>

<pre><code>(function() {
    var htmlStr = '';
    var el = document.getElementById('main');

    // Wrapped by setTimeout!
    setTimeout(function() {
        for (var i = 0; i &lt;= 100; i++) {
            var str = '&lt;div id="test' + i + '"&gt;test' + i + '&lt;/div&gt;';
            htmlStr += str;
        }
    }, 0);

    var el = document.getElementById('main');
    el.innerHTML = htmlStr;

    var last = document.getElementById('test100');
    last.addEventListener('click', function(e) {
        alert(this.id);
    }, false);      
})();
</code></pre>

<p>不管是用firebug还是web developer tool，在控制台里都会看到 <span style="color:red">&ldquo;Uncaught TypeError: Cannot call method &lsquo;addEventListener&rsquo; of null&rdquo;</span>，也就是说压根没找到last这个元素，这究竟是怎么回事？setTimeout是延迟执行某段脚本，但是如果延迟时间设置为0不是就等于没有延迟么？</p>

<p>这就和任务（事件）队列有关系了，前面说过JavaScript引擎会一直等待任务队列中任务的到来，而setTimeout就会使定时触发线程产生 <strong>异步定时事件</strong> 放在任务队列的最后，等队列中排在它前面的事件执行完了之后才会执行，setTimeout的执行时间点只是加入javascript主执行队列中的时间点，至于什么时候执行，是由js引擎线程按顺序执行的队列来决定，因此虽然我们设置了0毫秒延时，但是由于跳出了当前js执行线程的上下文环境，所以还是会有一个等待的时间，许多文章会说这个等待时间的极限（如果队列中没有其他事件的话）是16ms，但是现如今这个时间已经被大大缩短：</p>

<pre><code>在早期，js的callback执行，是依赖CPU的中断来进行控制的，如果两个中断之间时间太短会导致，CPU性能消耗很高，同时影响能耗，于是微软和英特公司为了解决这个问题，就约定每个中断之间的间隔是15.6ms（64 fps）所以就是我们常见的约等于16ms的间隔。不过随着web的要求不断增加，大家希望放宽这个时间，于是在高端浏览器，这个性能被提升了4倍左右，所以在chrome，ie10等浏览器，setTimeout的间隔缩短到了4ms（250 fps）。

注：浏览器模型定时计数器并不是由JavaScript引擎计数的,因为JavaScript引擎是单线程的,如果处于阻塞线程状态就无法计时，因此它必须依赖外部来计时并触发定时。
</code></pre>

<p>利用setTimeout(callbakFunction, 0)这个特性，我们可以解决很多问题，比如：</p>

<pre><code>&lt;input id='my' type="text"&gt;
&lt;script&gt;
document.getElementById('my').onkeypress = function(event) {
    this.value = this.value.toUpperCase();
}
&lt;/script&gt;
</code></pre>

<p>这段代码实际上是无效的，因为keypress执行时浏览器还没有把输入值渲染到DOM结构中，因此也无法讲其转换为大写字母，但是如果我们使用 <strong>setTimeout(callbackFunction, 0)</strong> 就可以搞掂它：</p>

<pre><code>&lt;input id='my' type="text"&gt;
&lt;script&gt;
document.getElementById('my').onkeypress = function(event) {
    var self = this;
    setTimeout(function() {
        self.value = self.value.toUpperCase()
    }, 0);
}
&lt;/script&gt;
</code></pre>

<p>最后，再说回GUI渲染线程和JavaScript线程互相阻塞的问题，有没有办法使二者无阻塞运行呢？答案是“有！”</p>

<p>随着HTML5技术的发展，在浏览器GUI线程外运行javascript代码成为了可能。<a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/workers.html">WebWorker规范</a> 提供了一个简单的方式让javascript代码在后台线程运行而不影响UI线程。每一个webworker间都是相互独立的，都在自己的线程中运行，现阶段各浏览器对规范的实现并不统一，但是我们仍然对其充满期待，因为它的多线程特性为基于Web系统开发的程序猿们提供了强大的并发程序设计功能，允许开发人员设计开发出性能和交互更好的富客户端应用程序。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为什么要使用现代浏览器]]></title>
    <link href="http://hebuliang.github.io/blog/2013/08/06/about-browser/"/>
    <updated>2013-08-06T16:57:00+08:00</updated>
    <id>http://hebuliang.github.io/blog/2013/08/06/about-browser</id>
    <content type="html"><![CDATA[<p>标题中所提及的 <strong>现代浏览器</strong> 主要指桌面浏览器也就是PC端所使用的浏览器软件，移动端（手机和平板电脑）所使用的浏览器我们暂且认为其已经属于现代浏览器范畴（虽然也有很多不尽如人意之处,后续文章会详细叙述）所以按下不表。</p>

<p>正文开始前先上几张图和数据，以便大家对国内浏览器占有率有个直观感受，图片和数据均来源于<a href="http://brow.data.cnzz.com/">CNZZ</a>：</p>

<p><img src="http://www.eguan.cn//upload/201305091368066669.jpg" alt="图片1" style="width: 500px;height: 290px;margin: 20px auto;display: block;"></p>

<p style="text-align:center;">注：本报表数据自2009年01月开始统计</p>


<pre><code>根据CNZZ数据中心对国内主流浏览器的统计分析，2013年5月，IE浏览器市场份额有所波动。总体上讲，使用率环比4月份呈现增长趋势，使用率从4月份的47.01%增至49.03%，涨幅达到了2.02%，占有率趋势恰好相反，由4月份的46.32%降至45.51%，同4月相比下降了0.81%。IE浏览器中，从使用率来看，IE7、IE8份额与4月份相比有所增长，而IE6、IE9市场份额呈现下降趋势；从占有率来看，IE7呈现增长趋势，而IE6、IE8、IE9份额与4月份相比有所下降。

2013年5月，除IE浏览器以外，其他浏览器市场份额有所波动。从浏览器使用率来看，大部分浏览器与4月份环比都呈现下降趋势，其中360安全、360极速、搜狗浏览器下降幅度较为明显，而Safari、猎豹浏览器依然持续增长趋势；从浏览器占有率来看，Safari、Chrome、猎豹与4月份环比呈现增长趋势，而360安全、360极速、搜狗、傲游、QQ趋势恰好相反，其他浏览器份额变化不大。
</code></pre>

<!--more-->


<h3>使用篇</h3>

<p>我从1997年开始接触互联网，当时个人电脑贵的要死动辄上万，但是一些比较人性化的 <strong>国产电脑专卖店</strong> (是的，当时就是有这么一个高端大气上档次的名词) 诸如长城、方正、海尔甚至还有长岭（就是长岭阿里斯顿也就是产电冰箱的那个公司，因为我第一台个人PC就是这个牌子所以印象相当深刻）在卖场里摆放着数台PC供人们把玩，如果你交钱的话（貌似是8块钱一小时）还可以在专卖店里享受着空调和免费饮品的待遇上网，估计这就是早年间网吧的雏形，当时的ISP（因特网服务提供商）叫做瀛海威时空，用户通过电话线拨号上网，那会压根没有什么浏览器的概念，上网用的都是一水儿的IE4.0/IE5.0（其实早在94年Netscape Navigator浏览器就已经在国外远远超越了IE，但是当时国内消息闭塞所以没什么人用），开一个页面要等老半天，还没怎么&#8221;冲浪&#8221;瞬间一小时就过去了，然后我会掏出仅剩的8元钱非常潇洒地说：“再续一个小时！”其实心里在滴血……</p>

<p>一年之后我终于拥有了自己的电脑，并且死乞白赖央求我父母办理了家中拨号上网，结束了在专卖店掏钱上网还要看人白眼的苦日子，这个时候windows95已经逐渐退出舞台，取而代之的是铺天盖地的臭名昭著的windows98，随着上网经验增多我知道了用来上网的这个蓝色的&#8221;e&#8221;的学名叫做——浏览器，并且还有版本的区分。</p>

<p>随着时间的推移，我开始对当时的IE感到不满：每看一个网页要么就刷新之后取代了原先的网页，或者弹出一个新窗口，导致本来就不大的显示器密密麻麻全是新窗口，而那个时候出现了一款拉风的浏览器叫做遨游（Maxthon，也有人叫马桶），它支持多Tab浏览网页并且只有一个窗口显示当前Tab的内容，还支持自定义皮肤什么的，基于这些优点我一直用Maxthon直到2005年左右。</p>

<p>浏览器这个东西的发展其实非常迅速，当然主要的推手是互联网的发展，我印象中国内从06年（06年我刚好也开始工作）之后就开始慢慢出现各种浏览器软件（其实早在04年Mozilla基金会就已经借由募捐的方式发布了Firefox 1.0，在纽约时报上刊登了整版的广告），而 WEB2.0 概念开始普及之后普通的页面（类似早期的hao123）早已不能入大众法眼，网页上开始加入大量特效以增强用户体验加强网站粘性，中古时期的浏览器根本无法承受如此消耗内存和CPU占用率的花哨页面，于是部分理念比较先进的国人开始尝试在国外早已流行至一塌糊涂的Firefox（火狐）浏览器（下文用FF代替），想当初我从IE系（老版本的Maxthon其实也采用的是IE内核）切换到FF的时候，那酸爽！真叫人无法相信！呃，错了，应该是那快速和清爽的感觉，真叫人无法相信！一直到Chrome的出现，FF始终占据着浏览器并且排行绑的第二把交椅，第一当然还是万恶的IE，Google是一家非常有野心也有把野心变为现实的能力的公司，Chrome的出现就是很好的证明，数个版本迭代之后从界面到启动速度再到浏览器内核又到javascript引擎都将FF甩开了几百个IE6/7/8（FF和Chrome的差距并不大，可见IE6、7、8有多么烂！M$有多么守旧！哈哈！开个玩笑，M$还是不错的，FF每次发布新版本M$都会送个蛋糕过去意思意思）。</p>

<p>近些年随着国内互联网公司的崛起（以百度、腾讯、阿里巴巴、360为首），各家公司为了以自己的平台为入口瓜分我等网民口袋里的银子也纷纷推出了自己的浏览器，其实都是旧瓶装新酒，用Webkit和Gecko还有Trident等等国外的网页排版引擎（就是前文所说的浏览器引擎）为核心，外面再包装一层自己开发的界面就当做一个新浏览器推出，其中在国内市场占有率极高的xx安全/急速浏览器就是个典型例子，这种做法本身无可厚非因为上述浏览器内核基本都是开源的，但是某数字公司的做法是将旗下的浏览器与自家的xx卫士捆绑在一起，xx卫士与xx浏览器在用户上网时狼狈为奸丧尽天良干了些很下作的勾当，其它国内的浏览器也普遍都有些猫腻由此还引发了前阵子的各种口水战，感兴趣的可以去国内知名安全论坛看雪（链接我就不放了）瞧瞧，有很详尽的对这一大坨浏览器偷摸行为（诸如窃取用户隐私数据之类）的分析，<span style="color:#0092DF">所以为了能够畅快淋漓地使用淘宝、流畅地玩网页游戏、安全地访问各种xx网站、体验最新的HTML5、CSS3、ECMAScript6的新特性，姑娘们和小伙子们，请放弃使用IE6、7、8以及打着各种口号和旗帜的国内浏览器吧，你会觉得安全、放松以及极致的快速，从此进入无障碍浏览网页的新时代！</span></p>

<p>放图一张展示浏览器历史和发展以及占有率</p>

<p><img src="http://images.51cto.com/files/uploadimg/20111214/1004060.jpg" alt="图片2" /></p>

<h3>开发篇</h3>

<p>如果对网页开发没兴趣的以下内容就可以跳过了，不过现在连平面模特和影视明星还有运动员都开始学习网站开发和网页开发，以后网页开发会成为连小盆友都会的技能，所以我觉得看看也无伤大雅。</p>

<p>06年我开始接触网页开发，从最基础的HTML、CSS、JavasScript写起，期间还给FF和Chrome做各种浏览器插件一直到现在前端工程师成为一个正式的职位，可以说对现代浏览器的迅速发展感到欣慰，同时也很头疼，欣慰的是现代浏览器已经不仅仅是浏览器，对于开发人员而言现代浏览器已经是一个开发平台；头疼的是对于这么多种浏览器，<strong>浏览器兼容性</strong> 已经成为一个非常棘手的大~~~~~~问题！</p>

<p>浏览器兼容性问题，又被称为网页兼容性问题，意思是一个网页在各种浏览器上的显示效果可能不一致而产生浏览器和网页间的兼容问题。如果没法统一一个页面在各个浏览器下的展现形式保持一致，就无法给用户以最好的浏览体验。我们知道一个网页的主要组成部分是HTML、css以及javascript，其中HTML负责页面层级结构，css控制页面展现样式，javascript则肩负网页和用户交互的部分，而由于各个浏览器使用的排版引擎不同（上文已经说过）、javascript引擎实现的标准也不同，所以才会出现兼容性问题，从而导致一个没有经过兼容性处理的页面在IE6、7、8、9、10、11，Chorme、FireFox、Safari、Opera等浏览器上展现出的样子和交互行为都不一致甚至会报错。</p>

<p>对于本文所提及的现代浏览器：Chrome、Firefox、Safari、Opera，IE10+，先暂且算上IE9（其实IE9也不能真正属于标准的现代浏览器），几乎没有兼容性问题，因为这几种浏览器的内核和javascript引擎都遵循WEB标准，包括W3C组织以及WHATAG组织指定的各种规范（关于WEB标准组织之争是另一个话题，感兴趣的可以google一下，关键字W3C WHATAG HTML5），只不过各家浏览器在实现时都不是完全按照标准实现，而是做了一些小改动，所以前端工程师主要面对的就是IE6、7、8这三位大爷，因为实现这仨货的M$工程师当初并没有遵循W3C标准，而是自己搞了一套标准，所以如果需要兼容这些中古时代的浏览器，前端工程师不得不花费大量的心血进行研究和改动，一个经验较少的前端甚至有可能在完成整个页面之后为了对付浏览器兼容性问题彻底改掉之前的代码，并且，最重要的是许多灰常牛x的交互效果和动画效果在这些古老的浏览器上根本无法支持，举个小栗子：IE6不支持position:fixed，所以只靠css没法实现浏览网页时右侧始终有一个&#8221;回到顶部&#8221;按钮，当然有人说可以用css表达式实现啊，但是众所周知css表达式的性能实在是呵呵，因此只能靠js实现，对于一个稍微有点追求的前端工程师来讲绝对是件沮丧透顶的事！再举个栗子：CSS3已经走进了千家万户，用它实现的动画效果已经可以媲美已经夕阳西下的flash，但是当你做出一个超级棒的动画时，这时候客户/项目经理/产品经理/运营/销售对你说：“呵呵，咱们应该支持低版本的IE浏览器啊，你看，咱们还有接近50%的用户在用IE6、7、8呢，呵呵！” 这时候前端在想什么？前端神马都没想，只有心中几千万头草泥马呼啸而过……</p>

<p style="color:#0092DF">浏览器兼容性对于开发人员伤害之深、危害之广已经到了刻不容缓的地步，有志于做前端开发或者设计师的童鞋们，在学校机房上课、在星巴克喝咖啡时、在飞机上、在火车上甚至在家里，如果看到有人在用那几种浏览器，请及时制止他们并且推荐现代先进的浏览器给他们使用，如果他们不用————那就算了 - -!，迟早他们会为此后悔，因为我们欣喜的看到国内的互联网公司已经开始和国际接轨，有的加入了W3C组织，有的已经开始不支持中古浏览器，有的在对网页做平稳退化，固执地不使用现代浏览器的人终将会被互联网所淘汰。</p>


<p>前面讲过，现代浏览器对于开发人员来讲已经不仅仅是浏览器，而是一个开发平台，百花齐放的浏览器插件使前端开发和调试不再成为难事，FF有firebug插件、Chrome有Web Developer Tools，而在最激进的Chrome Canary版本，可以通过开启各种实验性质的选项进行开发，Canvas和websocket这种新特性在Canary里面就是小儿科，你甚至可以使用WebGL和RTC做一个体感的3D版切水果游戏，这一切都不再属于硬件厂商的专利，普通开发人员一样可以做到。</p>

<p>想说的还有很多，但是已经很晚，以后在聊吧。</p>

<p>附录：</p>

<p><a href="http://https://developer.mozilla.org/zh-CN/docs/HTML/HTML5/HTML5_%E5%85%A5%E9%97%A8">HTML5入门</a></p>

<p><a href="http://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/">现代浏览器工作原理</a></p>

<p><a href="http://bbs.csdn.net/topics/340173664">说说标准系列</a></p>

<p><a href="http://bbs.csdn.net/topics/340173659">浏览器兼容性问题目录</a></p>
]]></content>
  </entry>
  
</feed>
